service: ausgaben

custom:
  config: ${file(./serverless.dev.yml)}
  cors:
    origin: '*'
    headers:
      - Content-Type
      - X-Amz-Date
      - Authorization
      - X-Api-Key
      - X-Amz-Security-Token
      - X-Amz-User-Agent
      - If-Match
      - Accept
    allowCredentials: true

provider:
  name: aws
  runtime: nodejs6.10
  stage: ${opt:stage, 'dev'}
  region: eu-central-1
  environment:
    TABLE_EVENTS: ${self:service}-${self:provider.stage}-events
    TABLE_INDEX: ${self:service}-${self:provider.stage}-index
    API_ENDPOINT: ${self:custom.config.apiEndpoint}
  iamRoleStatements:
    - Effect: "Allow"
      Action:
      - dynamodb:*
      Resource: arn:aws:dynamodb:*:*:table/${self:service}-${self:provider.stage}-*

functions:
  apiIndex:
    handler: handler/api.index
    events:
    - http:
        path: api
        method: get
        cors: ${self:custom.cors}
  me:
    handler: handler/user.me
    events:
    - http:
        path: api
        method: post
        cors: ${self:custom.cors}
        authorizer:
          arn: ${self:custom.config.userPoolArn}

  createCheckingAccount:
    handler: handler/checkingAccount.create
    events:
    - http:
        path: checking-account
        method: post
        cors: ${self:custom.cors}
        authorizer:
          arn: ${self:custom.config.userPoolArn}

  searchCheckingAccount:
    handler: handler/checkingAccount.search
    events:
    - http:
        path: checking-account/search
        method: post
        cors: ${self:custom.cors}
        authorizer:
          arn: ${self:custom.config.userPoolArn}

  getCheckingAccount:
    handler: handler/checkingAccount.get
    events:
    - http:
        path: checking-account/{id}
        method: get
        cors: ${self:custom.cors}
        authorizer:
          arn: ${self:custom.config.userPoolArn}

  createSpending:
    handler: handler/spending.create
    events:
    - http:
        path: checking-account/{id}/spending
        method: post
        cors: ${self:custom.cors}
        authorizer:
          arn: ${self:custom.config.userPoolArn}

  createPeriodical:
    handler: handler/periodical.create
    events:
    - http:
        path: checking-account/{id}/periodical
        method: post
        cors: ${self:custom.cors}
        authorizer:
          arn: ${self:custom.config.userPoolArn}

  updateCheckingAccount:
    handler: handler/checkingAccount.update
    events:
    - http:
        path: checking-account/{id}/{property}
        method: put
        cors: ${self:custom.cors}
        authorizer:
          arn: ${self:custom.config.userPoolArn}

  searchSpending:
    handler: handler/spending.search
    events:
    - http:
        path: checking-account/{id}/spending/search
        method: post
        cors: ${self:custom.cors}
        authorizer:
          arn: ${self:custom.config.userPoolArn}

  searchPeriodical:
    handler: handler/periodical.search
    events:
    - http:
        path: checking-account/{id}/periodical/search
        method: post
        cors: ${self:custom.cors}
        authorizer:
          arn: ${self:custom.config.userPoolArn}

  searchTitles:
    handler: handler/checkingAccount.searchTitles
    events:
    - http:
        path: checking-account/{id}/titles/search
        method: post
        cors: ${self:custom.cors}
        authorizer:
          arn: ${self:custom.config.userPoolArn}

  updateSpending:
    handler: handler/spending.update
    events:
    - http:
        path: spending/{id}
        method: put
        cors: ${self:custom.cors}
        authorizer:
          arn: ${self:custom.config.userPoolArn}

  getSpending:
    handler: handler/spending.get
    events:
    - http:
        path: spending/{id}
        method: get
        cors: ${self:custom.cors}
        authorizer:
          arn: ${self:custom.config.userPoolArn}

  deleteSpending:
    handler: handler/spending.delete
    events:
    - http:
        path: spending/{id}
        method: delete
        cors: ${self:custom.cors}
        authorizer:
          arn: ${self:custom.config.userPoolArn}

  getReport:
    handler: handler/report.get
    events:
    - http:
        path: checking-account/{id}/report
        method: post
        cors: ${self:custom.cors}
        authorizer:
          arn: ${self:custom.config.userPoolArn}

resources:
  Resources:
    eventsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-${self:provider.stage}-events
        KeySchema:
        - AttributeName: Id
          KeyType: HASH
        - AttributeName: Version
          KeyType: RANGE
        AttributeDefinitions:
        - AttributeName: Id
          AttributeType: S
        - AttributeName: Version
          AttributeType: N
        - AttributeName: AggregateName
          AttributeType: S
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        GlobalSecondaryIndexes:
        - IndexName: Aggregate-index
          KeySchema:
          - AttributeName: AggregateName
            KeyType: HASH
          Projection:
            ProjectionType: INCLUDE
            NonKeyAttributes:
            - AggregateId
          ProvisionedThroughput:
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1
    indexTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-${self:provider.stage}-index
        KeySchema:
        - AttributeName: IndexName
          KeyType: HASH
        - AttributeName: IndexKey
          KeyType: RANGE
        AttributeDefinitions:
        - AttributeName: IndexName
          AttributeType: S
        - AttributeName: IndexKey
          AttributeType: S
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
